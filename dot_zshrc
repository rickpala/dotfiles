# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Make NeoVim the default editor
export EDITOR="nvim"
export VISUAL="nvim"

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH
# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# plugins=(git)  # breaks GCL
plugins=(
  zsh-autosuggestions
  zsh-syntax-highlighting
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
source ~/.zsh_aliases

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
source /Users/rpalaguachi/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# Important for gLinux setup
if [[ -f /etc/bash_completion.d/hgd ]]; then
  source /etc/bash_completion.d/hgd
fi


gcertIfNeeded() {
  # gcert (if needed)
  if gcertstatus; then
      # authenticated
      echo "gcert wasn't needed"
  else
      # needs to authenticate
      gcert
  fi
}

creationToolOrIga() {
  # run `sk` or `iga` depending on dir
  PS3="Working in CreationTool or iGA?"$'\n'
  select opt in CreationTool iGA
  do
    case $opt in
      "CreationTool")
        cd googlemac/iPhone/UniversalContentPrimitive/CreationTool
        code StoryKit.code-workspace
        break ;;
      "iGA")
        iga 
        cd googlemac/GoogleMobile
        code Google.code-workspace
        break ;;
      *) 
        echo "Defaulting to google3/"
        break ;;
    esac
  done
}

work() {
  # check if cl/# passed in
  # check if b/# passed in
  if [[ $# < 1 ]]; then
      echo "Error: At least 1 argument must be passed. $# were found."
      return 1
  fi
  rawShortlink=$1
  workspace=""

  if [[ ! ( $rawShortlink == cl* || $rawShortlink == b* ) ]]; then
    echo "Error: A b/ or cl/ shortlink was not found. Received $rawShortlink."
  fi

  # if a CL number is passed, no need for manipulation
  if [[ $rawShortlink == cl* ]]; then
    workspace=$rawShortlink
  fi 
    
  # if a B number is passed, drop the "/"
  if [[ $rawShortlink == b* ]]; then
    if [[ $rawShortlink == b/* ]]; then
        workspace=$(echo "$rawShortlink" | sed "s:/::")
    fi
  fi
  
  if [[ -z $workspace ]]; then
    echo "Error: $workspace not filled"
  else
    echo "Using workspace name: $workspace"
  fi


  gcertIfNeeded
  hgd -f $workspace
  creationToolOrIga
  return 0
}

iblaze_sk() {
  /usr/local/bin/iblaze \ 
      --blazerc=googlemac/iPhone/StoryKit/blazerc \ 
      build \ 
      --tool_tag=nextcode:user_build \ 
      --sponge_labels=nextcode_project=googlemac/iPhone/StoryKit/StoryKit.code-workspace 
      --define=storykit.stubs.analytics=1 \ 
      --define=storykit.stubs.restrictions=1 \ 
      --compilation_mode=dbg \ 
      --verbose_failures \ 
      --announce_rc \ 
      --bes_outerr_buffer_size=0 \ 
      --define=apple.add_debugger_entitlement=1 \ 
      --define=apple.tree_artifact_dsym_files=1 \ 
      --experimental_use_cpp_compile_action_args_params_file \ 
      --define=apple.experimental.tree_artifact_outputs=1 \ 
      --config=ios_sim_arm64 \ 
      --ios_multi_cpus=sim_arm64 \ 
      --macos_cpus=arm64 \ 
      --xcode_version=14.3.1.14E300c \ 
      --strategy=SwiftCompile=dynamic \ 
      --features=swift.file_prefix_map \ 
      --features=swift.index_while_building \ 
      --features=swift.modular_indexing \ 
      --nopin_citc_snapshot \ 
      --noexperimental_fuseless_output \ 
      --file_write_strategy= \ 
      --template_expansion_strategy= \ 
      --noexperimental_inmemory_dotincludes_files \ 
      --show_result=0 \ 
      --build_event_binary_file=/var/folders/jk/d4g557111v34xnyglfj3jlr800th7_/T/nextcode_build_events-60027-6ufsA57cs47N-.pb \ 
      --nobuild_event_binary_file_path_conversion \ 
      --bes_upload_mode=fully_async \ 
      --aspects=//googlemac/nextcode/blaze/aspects:build_artifacts_metadata.bzl%metadata_aspect,//googlemac/nextcode/blaze/aspects:target_compilation_metadata.bzl%metadata_aspect,//googlemac/nextcode/api:index.bzl%index_aspect \ 
      --output_groups=+nextcode_build_artifacts_metadata,+nextcode_target_compilation_metadata,+nextcode_minimal_resolve,+nextcode_index \ 
      -- //googlemac/iPhone/StoryKit/Demo:Demo
}


source $HOME/.iterm2_shell_integration.zsh
iterm2_print_user_vars() {
  if [[ $PWD == /google* ]]; then
    citcWorkspace=$(citctools info 2>/dev/null | grep ^Root | awk '{print $3}' | sed "s:.*/::")
    iterm2_set_user_var citcWorkspace $citcWorkspace
  else
    iterm2_set_user_var citcWorkspace "..."
  fi

}

# Enable Vim in the shell
bindkey -v

eval "$(zoxide init zsh)"

# Use the default zsh config for fuzzyfinder
source <(fzf --zsh)

# TODO: Add zshrc for google3 fzf codesearch
# source ~/.bash_functions

# [[ $- == *i* ]] && source /usr/share/zsh-completion/completions/fzf 2> /dev/null
# TODO: Find the right way to reference this path, because the version number will change.
# source /opt/homebrew/Cellar/fzf/0.54.3/shell/key-bindings.zsh

# Add fzf support for custom commands
# fzf-completion path g4 devsite evsite

# Configure bindings
# export FZF_CTRL_T_COMMAND=_fzf_compgen_path
# export FZF_DEFAULT_COMMAND=_fzf_compgen_path
# export FZF_DEFAULT_OPTS='--height 40% --layout=reverse'

# Will chezmoi see this change?
# How about this?
